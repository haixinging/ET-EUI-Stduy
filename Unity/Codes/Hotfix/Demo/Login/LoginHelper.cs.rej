diff a/Unity/Codes/Hotfix/Demo/Login/LoginHelper.cs b/Unity/Codes/Hotfix/Demo/Login/LoginHelper.cs	(rejected hunks)
@@ -1,45 +1,117 @@
 using System;
+using System.Security.Policy;
+
+// ReSharper disable All
 
 
 namespace ET
 {
     public static class LoginHelper
     {
-        public static async ETTask Login(Scene zoneScene, string address, string account, string password)
+        public static async ETTask<int> Login(Scene zoneScene, string address, string account, string password)
         {
+            A2C_LoginAccount a2CLoginAccount = null;
+            Session accountSession = null;
+
             try
             {
-                // 创建一个ETModel层的Session
-                R2C_Login r2CLogin;
-                Session session = null;
-                try
-                {
-                    session = zoneScene.GetComponent<NetKcpComponent>().Create(NetworkHelper.ToIPEndPoint(address));
-                    {
-                        r2CLogin = (R2C_Login) await session.Call(new C2R_Login() { Account = account, Password = password });
-                    }
-                }
-                finally
+                accountSession = zoneScene.GetComponent<NetKcpComponent>().Create(NetworkHelper.ToIPEndPoint(address));
+                a2CLoginAccount = (A2C_LoginAccount)await accountSession.Call(new C2A_LoginAccount() { AccountName = account, Password = password });
+            }
+            catch (Exception e)
+            {
+                accountSession?.Dispose();
+                Log.Error(e.ToString());
+                return ErrorCode.ERR_NetWorkError;
+            }
+
+            if (a2CLoginAccount.Error != ErrorCode.ERR_Success)
+            {
+                accountSession?.Dispose();
+                return a2CLoginAccount.Error;
+            }
+
+            if (zoneScene.GetComponent<SessionComponent>() == null)
+            {
+                zoneScene.AddComponent<SessionComponent>();
+            }
+            
+            zoneScene.GetComponent<SessionComponent>().Session = accountSession;
+            zoneScene.GetComponent<SessionComponent>().Session.AddComponent<PingComponent>();
+            
+            zoneScene.GetComponent<AccountInfoComponent>().Token = a2CLoginAccount.Token;
+            zoneScene.GetComponent<AccountInfoComponent>().AccountId = a2CLoginAccount.AccountId;
+            
+            return ErrorCode.ERR_Success;
+
+        }
+
+        public static async ETTask<int> GetServerInfos(Scene zoneScene)
+        {
+            A2C_GetServerInfos a2CGetServerInfos = null;
+
+            try
+            {
+                a2CGetServerInfos = (A2C_GetServerInfos)await zoneScene.GetComponent<SessionComponent>().Session.Call(new C2A_GetServerInfos()
                 {
-                    session?.Dispose();
-                }
+                    AccountId = zoneScene.GetComponent<AccountInfoComponent>().AccountId,
+                    Token = zoneScene.GetComponent<AccountInfoComponent>().Token
+                });
 
-                // 创建一个gate Session,并且保存到SessionComponent中
-                Session gateSession = zoneScene.GetComponent<NetKcpComponent>().Create(NetworkHelper.ToIPEndPoint(r2CLogin.Address));
-                gateSession.AddComponent<PingComponent>();
-                zoneScene.AddComponent<SessionComponent>().Session = gateSession;
-				
-                G2C_LoginGate g2CLoginGate = (G2C_LoginGate)await gateSession.Call(
-                    new C2G_LoginGate() { Key = r2CLogin.Key, GateId = r2CLogin.GateId});
+            }
+            catch (Exception e)
+            {
+                Log.Error(e.ToString());
+                return ErrorCode.ERR_NetWorkError;
+            }
+
+            if (a2CGetServerInfos.Error != ErrorCode.ERR_Success)
+            {
+                return a2CGetServerInfos.Error;
+            }
+
+            foreach (var serverInfoProto in a2CGetServerInfos.ServerInfoList)
+            {
+                ServerInfo serverInfo = zoneScene.GetComponent<ServerInfosComponent>().AddChild<ServerInfo>();
+                serverInfo.FromMessage(serverInfoProto);
+                zoneScene.GetComponent<ServerInfosComponent>().Add(serverInfo);
+            }
+            
+            
+            return ErrorCode.ERR_Success;
+        }
 
-                Log.Debug("登陆gate成功!");
+        public static async ETTask<int> CreateRole(Scene zoneScene, string name)
+        {
+            A2C_CreateRole a2CCreateRole = null;
 
-                await Game.EventSystem.PublishAsync(new EventType.LoginFinish() {ZoneScene = zoneScene});
+            try
+            {
+                a2CCreateRole = (A2C_CreateRole)await zoneScene.GetComponent<SessionComponent>().Session.Call(new C2A_CreateRole()
+                {
+                    AccountId = zoneScene.GetComponent<AccountInfoComponent>().AccountId,
+                    Token = zoneScene.GetComponent<AccountInfoComponent>().Token,
+                    Name = name,
+                    ServerId = zoneScene.GetComponent<ServerInfosComponent>().CurrentServerId,
+                });
             }
             catch (Exception e)
             {
-                Log.Error(e);
+                Log.Error(e.ToString());
+                return ErrorCode.ERR_NetWorkError;
             }
-        } 
+
+            if (a2CCreateRole.Error != ErrorCode.ERR_Success)
+            {
+                Log.Error(a2CCreateRole.Error.ToString());
+                return a2CCreateRole.Error;
+            }
+
+            RoleInfo newRoleInfo = zoneScene.GetComponent<RoleInfosComponent>().AddChild<RoleInfo>();
+            newRoleInfo.FromMessage(a2CCreateRole.RoleInfo);
+            zoneScene.GetComponent<RoleInfosComponent>().RoleInfos.Add(newRoleInfo);
+            
+            return ErrorCode.ERR_Success;
+        }
     }
 }
\ No newline at end of file
